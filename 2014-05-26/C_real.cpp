#include<map>
#include<vector>
#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

const int L = 306;

int list[L][6] = {
{12, 94, 64, 49, 97, 51},
{12, 94, 128, 42, 97, 51},
{15, 73, 117, 133, 130, 81},
{16, 16, 16, 16, 32, 13},
{16, 19, 16, 19, 128, 11},
{16, 21, 16, 21, 32, 17},
{16, 21, 64, 14, 32, 17},
{16, 21, 128, 12, 32, 17},
{16, 26, 16, 26, 32, 21},
{16, 26, 16, 26, 128, 15},
{16, 31, 16, 31, 32, 25},
{16, 33, 16, 33, 128, 19},
{16, 33, 64, 22, 128, 19},
{16, 36, 16, 36, 32, 29},
{16, 36, 64, 24, 32, 29},
{16, 40, 16, 40, 128, 23},
{16, 40, 32, 32, 128, 23},
{16, 41, 16, 41, 32, 33},
{16, 46, 16, 46, 32, 37},
{16, 47, 16, 47, 128, 27},
{16, 51, 16, 51, 32, 41},
{16, 51, 64, 34, 32, 41},
{16, 54, 16, 54, 128, 31},
{16, 54, 64, 36, 128, 31},
{16, 56, 16, 56, 32, 45},
{16, 56, 128, 32, 32, 45},
{16, 61, 16, 61, 32, 49},
{16, 61, 16, 61, 128, 35},
{16, 66, 16, 66, 32, 53},
{16, 66, 64, 44, 32, 53},
{16, 68, 16, 68, 128, 39},
{16, 71, 16, 71, 32, 57},
{16, 75, 16, 75, 128, 43},
{16, 75, 32, 60, 128, 43},
{16, 75, 64, 50, 128, 43},
{16, 76, 16, 76, 32, 61},
{16, 81, 16, 81, 32, 65},
{16, 81, 64, 54, 32, 65},
{16, 82, 16, 82, 128, 47},
{16, 86, 16, 86, 32, 69},
{16, 89, 16, 89, 128, 51},
{16, 91, 16, 91, 32, 73},
{16, 91, 128, 52, 32, 73},
{16, 96, 16, 96, 32, 77},
{16, 96, 16, 96, 128, 55},
{16, 96, 64, 64, 32, 77},
{16, 96, 64, 64, 128, 55},
{16, 101, 16, 101, 32, 81},
{16, 103, 16, 103, 128, 59},
{16, 106, 16, 106, 32, 85},
{16, 110, 16, 110, 128, 63},
{16, 110, 32, 88, 128, 63},
{16, 111, 16, 111, 32, 89},
{16, 111, 64, 74, 32, 89},
{16, 116, 16, 116, 32, 93},
{16, 117, 16, 117, 128, 67},
{16, 117, 64, 78, 128, 67},
{16, 121, 16, 121, 32, 97},
{16, 124, 16, 124, 128, 71},
{16, 126, 16, 126, 32, 101},
{16, 126, 64, 84, 32, 101},
{16, 126, 128, 72, 32, 101},
{16, 131, 16, 131, 32, 105},
{16, 131, 16, 131, 128, 75},
{16, 136, 16, 136, 32, 109},
{16, 138, 16, 138, 128, 79},
{16, 138, 64, 92, 128, 79},
{16, 141, 16, 141, 32, 113},
{16, 141, 64, 94, 32, 113},
{16, 145, 16, 145, 128, 83},
{16, 145, 32, 116, 128, 83},
{16, 146, 16, 146, 32, 117},
{32, 11, 32, 11, 16, 14},
{32, 13, 32, 13, 64, 11},
{32, 15, 32, 15, 16, 19},
{32, 18, 32, 18, 128, 13},
{32, 18, 64, 15, 128, 13},
{32, 19, 32, 19, 16, 24},
{32, 19, 32, 19, 64, 16},
{32, 23, 32, 23, 16, 29},
{32, 25, 32, 25, 64, 21},
{32, 25, 32, 25, 128, 18},
{32, 27, 32, 27, 16, 34},
{32, 31, 32, 31, 16, 39},
{32, 31, 32, 31, 64, 26},
{32, 32, 16, 40, 128, 23},
{32, 32, 32, 32, 128, 23},
{32, 35, 32, 35, 16, 44},
{32, 35, 128, 25, 16, 44},
{32, 37, 32, 37, 64, 31},
{32, 39, 32, 39, 16, 49},
{32, 39, 32, 39, 128, 28},
{32, 43, 32, 43, 16, 54},
{32, 43, 32, 43, 64, 36},
{32, 46, 32, 46, 128, 33},
{32, 47, 32, 47, 16, 59},
{32, 49, 32, 49, 64, 41},
{32, 49, 128, 35, 64, 41},
{32, 51, 32, 51, 16, 64},
{32, 53, 32, 53, 128, 38},
{32, 55, 32, 55, 16, 69},
{32, 55, 32, 55, 64, 46},
{32, 59, 32, 59, 16, 74},
{32, 60, 16, 75, 128, 43},
{32, 60, 32, 60, 128, 43},
{32, 60, 64, 50, 128, 43},
{32, 61, 32, 61, 64, 51},
{32, 63, 32, 63, 16, 79},
{32, 63, 128, 45, 16, 79},
{32, 67, 32, 67, 16, 84},
{32, 67, 32, 67, 64, 56},
{32, 67, 32, 67, 128, 48},
{32, 71, 32, 71, 16, 89},
{32, 73, 32, 73, 64, 61},
{32, 74, 32, 74, 128, 53},
{32, 75, 32, 75, 16, 94},
{32, 79, 32, 79, 16, 99},
{32, 79, 32, 79, 64, 66},
{32, 81, 32, 81, 128, 58},
{32, 83, 32, 83, 16, 104},
{32, 85, 32, 85, 64, 71},
{32, 87, 32, 87, 16, 109},
{32, 88, 16, 110, 128, 63},
{32, 88, 32, 88, 128, 63},
{32, 91, 32, 91, 16, 114},
{32, 91, 32, 91, 64, 76},
{32, 91, 128, 65, 16, 114},
{32, 91, 128, 65, 64, 76},
{32, 95, 32, 95, 16, 119},
{32, 95, 32, 95, 128, 68},
{32, 97, 32, 97, 64, 81},
{32, 99, 32, 99, 16, 124},
{32, 102, 32, 102, 128, 73},
{32, 102, 64, 85, 128, 73},
{32, 103, 32, 103, 16, 129},
{32, 103, 32, 103, 64, 86},
{32, 107, 32, 107, 16, 134},
{32, 109, 32, 109, 64, 91},
{32, 109, 32, 109, 128, 78},
{32, 111, 32, 111, 16, 139},
{32, 115, 32, 115, 16, 144},
{32, 115, 32, 115, 64, 96},
{32, 116, 16, 145, 128, 83},
{32, 116, 32, 116, 128, 83},
{32, 119, 32, 119, 16, 149},
{32, 119, 128, 85, 16, 149},
{32, 121, 32, 121, 64, 101},
{32, 123, 32, 123, 128, 88},
{32, 127, 32, 127, 64, 106},
{32, 130, 32, 130, 128, 93},
{32, 133, 32, 133, 64, 111},
{32, 133, 128, 95, 64, 111},
{32, 137, 32, 137, 128, 98},
{32, 139, 32, 139, 64, 116},
{32, 144, 32, 144, 128, 103},
{32, 144, 64, 120, 128, 103},
{32, 145, 32, 145, 64, 121},
{64, 14, 16, 21, 32, 17},
{64, 14, 64, 14, 32, 17},
{64, 14, 128, 12, 32, 17},
{64, 15, 32, 18, 128, 13},
{64, 15, 64, 15, 128, 13},
{64, 19, 64, 19, 32, 23},
{64, 22, 16, 33, 128, 19},
{64, 22, 64, 22, 128, 19},
{64, 24, 16, 36, 32, 29},
{64, 24, 64, 24, 32, 29},
{64, 29, 64, 29, 32, 35},
{64, 29, 64, 29, 128, 25},
{64, 34, 16, 51, 32, 41},
{64, 34, 64, 34, 32, 41},
{64, 36, 16, 54, 128, 31},
{64, 36, 64, 36, 128, 31},
{64, 39, 64, 39, 32, 47},
{64, 43, 64, 43, 128, 37},
{64, 44, 16, 66, 32, 53},
{64, 44, 64, 44, 32, 53},
{64, 49, 12, 94, 97, 51},
{64, 49, 64, 49, 32, 59},
{64, 49, 128, 42, 32, 59},
{64, 49, 144, 47, 97, 51},
{64, 50, 16, 75, 128, 43},
{64, 50, 32, 60, 128, 43},
{64, 50, 64, 50, 128, 43},
{64, 54, 16, 81, 32, 65},
{64, 54, 64, 54, 32, 65},
{64, 57, 64, 57, 128, 49},
{64, 59, 64, 59, 32, 71},
{64, 64, 16, 96, 32, 77},
{64, 64, 16, 96, 128, 55},
{64, 64, 64, 64, 32, 77},
{64, 64, 64, 64, 128, 55},
{64, 69, 64, 69, 32, 83},
{64, 71, 64, 71, 128, 61},
{64, 74, 16, 111, 32, 89},
{64, 74, 64, 74, 32, 89},
{64, 78, 16, 117, 128, 67},
{64, 78, 64, 78, 128, 67},
{64, 79, 64, 79, 32, 95},
{64, 84, 16, 126, 32, 101},
{64, 84, 64, 84, 32, 101},
{64, 84, 128, 72, 32, 101},
{64, 85, 32, 102, 128, 73},
{64, 85, 64, 85, 128, 73},
{64, 89, 64, 89, 32, 107},
{64, 92, 16, 138, 128, 79},
{64, 92, 64, 92, 128, 79},
{64, 94, 16, 141, 32, 113},
{64, 94, 64, 94, 32, 113},
{64, 99, 64, 99, 32, 119},
{64, 99, 64, 99, 128, 85},
{64, 104, 64, 104, 32, 125},
{64, 106, 64, 106, 128, 91},
{64, 109, 64, 109, 32, 131},
{64, 113, 64, 113, 128, 97},
{64, 114, 64, 114, 32, 137},
{64, 119, 64, 119, 32, 143},
{64, 119, 128, 102, 32, 143},
{64, 120, 32, 144, 128, 103},
{64, 120, 64, 120, 128, 103},
{64, 124, 64, 124, 32, 149},
{64, 127, 64, 127, 128, 109},
{64, 134, 64, 134, 128, 115},
{64, 141, 64, 141, 128, 121},
{64, 148, 64, 148, 128, 127},
{117, 133, 15, 73, 130, 81},
{128, 11, 128, 11, 64, 13},
{128, 12, 16, 21, 32, 17},
{128, 12, 64, 14, 32, 17},
{128, 12, 128, 12, 32, 17},
{128, 13, 128, 13, 16, 23},
{128, 17, 128, 17, 16, 30},
{128, 17, 128, 17, 32, 24},
{128, 17, 128, 17, 64, 20},
{128, 21, 128, 21, 16, 37},
{128, 22, 128, 22, 32, 31},
{128, 23, 128, 23, 64, 27},
{128, 25, 32, 35, 16, 44},
{128, 25, 128, 25, 16, 44},
{128, 27, 128, 27, 32, 38},
{128, 29, 128, 29, 16, 51},
{128, 29, 128, 29, 64, 34},
{128, 32, 16, 56, 32, 45},
{128, 32, 128, 32, 32, 45},
{128, 33, 128, 33, 16, 58},
{128, 35, 32, 49, 64, 41},
{128, 35, 128, 35, 64, 41},
{128, 37, 128, 37, 16, 65},
{128, 37, 128, 37, 32, 52},
{128, 41, 128, 41, 16, 72},
{128, 41, 128, 41, 64, 48},
{128, 42, 12, 94, 97, 51},
{128, 42, 64, 49, 32, 59},
{128, 42, 128, 42, 32, 59},
{128, 42, 144, 47, 97, 51},
{128, 45, 32, 63, 16, 79},
{128, 45, 128, 45, 16, 79},
{128, 47, 128, 47, 32, 66},
{128, 47, 128, 47, 64, 55},
{128, 49, 128, 49, 16, 86},
{128, 52, 16, 91, 32, 73},
{128, 52, 128, 52, 32, 73},
{128, 53, 128, 53, 16, 93},
{128, 53, 128, 53, 64, 62},
{128, 57, 128, 57, 16, 100},
{128, 57, 128, 57, 32, 80},
{128, 59, 128, 59, 64, 69},
{128, 61, 128, 61, 16, 107},
{128, 62, 128, 62, 32, 87},
{128, 65, 32, 91, 16, 114},
{128, 65, 32, 91, 64, 76},
{128, 65, 128, 65, 16, 114},
{128, 65, 128, 65, 64, 76},
{128, 67, 128, 67, 32, 94},
{128, 69, 128, 69, 16, 121},
{128, 71, 128, 71, 64, 83},
{128, 72, 16, 126, 32, 101},
{128, 72, 64, 84, 32, 101},
{128, 72, 128, 72, 32, 101},
{128, 73, 128, 73, 16, 128},
{128, 77, 128, 77, 16, 135},
{128, 77, 128, 77, 32, 108},
{128, 77, 128, 77, 64, 90},
{128, 81, 128, 81, 16, 142},
{128, 82, 128, 82, 32, 115},
{128, 83, 128, 83, 64, 97},
{128, 85, 32, 119, 16, 149},
{128, 85, 128, 85, 16, 149},
{128, 87, 128, 87, 32, 122},
{128, 89, 128, 89, 64, 104},
{128, 92, 128, 92, 32, 129},
{128, 95, 32, 133, 64, 111},
{128, 95, 128, 95, 64, 111},
{128, 97, 128, 97, 32, 136},
{128, 101, 128, 101, 64, 118},
{128, 102, 64, 119, 32, 143},
{128, 102, 128, 102, 32, 143},
{128, 107, 128, 107, 32, 150},
{128, 107, 128, 107, 64, 125},
{128, 113, 128, 113, 64, 132},
{128, 119, 128, 119, 64, 139},
{128, 125, 128, 125, 64, 146},
{133, 79, 150, 43, 53, 59},
{144, 47, 64, 49, 97, 51},
{144, 47, 128, 42, 97, 51},
{150, 43, 133, 79, 53, 59}};

const int prime[3] = {1000000007, 1000000009, 99999989};

int pow(int x, int n, int p) {
    int ret = 1, mul = x;
    while (n) {
        if (n & 1) {
            ret = (long long)ret * mul % p;
        }
        mul = (long long)mul * mul % p;
        n >>= 1;
    }
    return ret;
}

bool check(int x, int a, int y, int b, int z, int c) {
    for (int i = 0; i < 3; ++i) {
        if ((pow(x, a, prime[i]) + pow(y, b, prime[i])) % prime[i] ==
            pow(z, c, prime[i])) {
            return false;
        }
    }
    return true;
}

int ans = 0;

map<long long, int> mem;

vector<long long> gen(int b_min, int b_max, int e_min, int e_max) {
    vector<long long> ret;
    for (int i = b_min; i <= b_max; ++i) {
        for (int j
    }
}

void solve(int x_min, int x_max, int a_min, int a_max,
           int y_min, int y_max, int b_min, int b_max,
           int z_min, int z_max, int c_min, int c_max) {
    vector<long long> x = gen(x_min, x_max, a_min, a_max),
                y = gen(y_min, y_max, b_min, b_max),
                z = gen(z_min, z_max, c_min, c_max);
}

int num[6][2], bak[6][2];

int main() {
    for (int i = 0; i < 6; ++i) {
        scanf("%d%d", &num[i][0], &num[i][1]);
        bak[i][0] = num[i][0], bak[i][1] = num[i][1];
    }
    for (int i = 0; i < 6; ++i) {
        int t1 = num[i][0], t2 = num[i][1];
        num[i][0] = max(1, num[i][0]),
        num[i][1] = min(10, num[i][1]);
        solve(num[0][0], num[0][1], num[1][0], num[1][1],
              num[2][0], num[2][1], num[3][0], num[3][1],
              num[4][0], num[4][1], num[5][0], num[5][1]);
        num[i][0] = t1, num[i][1] = t2;
        num[i][0] = max(num[i][0], 11);
    }
    for (int i = 0; i < L; ++i) {
        bool flag = true;
        for (int j = 0; j < 6; ++j) {
            flag = flag && (list[i][j] >= bak[i][0] && list[i][j] <= bak[i][1]);
        }
        if (flag) {
            ans += check(list[i][0], list[i][1],
                    list[i][2], list[i][3],
                  list[i][4], list[i][4]);
        }
    }
    printf("%lld\n", ans);
    return 0;
}
